/*
 *  Xen backend channel base class
 *  Copyright (c) 2016, Oleksandr Grytsov
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 */

#ifndef INCLUDE_DATACHANNEL_HPP_
#define INCLUDE_DATACHANNEL_HPP_

#include <atomic>
#include <memory>
#include <mutex>
#include <string>
#include <thread>

#include "RingBufferBase.hpp"
#include "XenException.hpp"
#include "XenEvtchn.hpp"
#include "Log.hpp"

namespace XenBackend {

/***************************************************************************//**
 * Exception generated by DataChannel
 ******************************************************************************/
class DataChannelException : public XenException
{
	using XenException::XenException;
};

class FrontendHandlerBase;
class XenStore;

/***************************************************************************//**
 * Represents the pair of xen ring buffer and associated event channel.
 ******************************************************************************/
class DataChannel
{
public:
public:
	/**
	 * @param[in] name       channel name
	 * @param[in] domId      frontend domain id
	 * @param[in] port       event channel port
	 * @param[in] ringBuffer ring buffer instance
	 */
	DataChannel(const std::string& name, int domId, int port,
				std::shared_ptr<RingBufferItf> ringBuffer);
	virtual ~DataChannel();

	/**
	 * Starts the data channel
	 */
	void start();

	/**
	 * Stops the data channel
	 */
	void stop();

	/**
	 * Returns data channel name
	 */
	const std::string& getName() const
	{
		std::lock_guard<std::mutex> lock(mMutex);

		return mName;
	}

	/**
	 * Returns weather the data channel is terminated.
	 * The data channel is terminated when an error occurs or the client calls
	 * stop() method.
	 */
	bool isTerminated() const { return mTerminated; }

private:
	std::string mName;

	XenEvtchn mEventChannel;
	std::shared_ptr<RingBufferItf> mRingBuffer;

	std::thread mThread;
	mutable std::mutex mMutex;
	std::atomic_bool mTerminate;
	std::atomic_bool mTerminated;

	Log mLog;

	void run();
};

}

#endif /* INCLUDE_DATACHANNELBASE_HPP_ */
