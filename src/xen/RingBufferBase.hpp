/*
 *  Xen base ring buffer
 *  Copyright (c) 2016, Oleksandr Grytsov
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 */

#ifndef INCLUDE_RINGBUFFERBASE_HPP_
#define INCLUDE_RINGBUFFERBASE_HPP_

#include <functional>

extern "C" {
#include "xenctrl.h"
#include <xen/io/ring.h>
}

#include "XenException.hpp"
#include "XenGnttab.hpp"

namespace XenBackend {

/***************************************************************************//**
 * Exception generated by RingBufferBase.
 * @ingroup Xen
 ******************************************************************************/
class RingBufferException : public XenException
{
	using XenException::XenException;
};

/***************************************************************************//**
 * Interface to implement custom ring buffer.
 * @ingroup Xen
 ******************************************************************************/
class RingBufferItf
{
public:

	typedef std::function<void()> NotifyEventCallback;

	virtual ~RingBufferItf() {}

	/**
	 * Is called when the request from the frontend received.
	 * This method should be reimplemented in derived classes.
	 */
	virtual void onRequestReceived() = 0;

	/**
	 * Sets callback which will be called when the associated event channel
	 * should send notification.
	 * @param[in] cbk <i>std::function</i> callback
	 */
	virtual void setNotifyEventChannelCbk(NotifyEventCallback cbk) = 0;
};

/***************************************************************************//**
 * Base class to create the custom ring buffer.
 * In order to create the ring buffer the client should implement a class
 * inherited from RingBufferBase and override processRequest() method.
 * @code
 * class MyRingBuffer : public XenBackend::RingBufferBase<
 *                                         my_back_ring,
 *                                         my_sring,
 *                                         my_req,
 *                                         my_resp>
 * {
 * public:
 *     MyRingBuffer(int domId, int ref) : RingBufferBase<
 *         my_back_ring, my_sring, my_req, my_resp>(domId, ref, 4096) {}
 * private:
 *     void processRequest(const my_req& req)
 *     {
 *         switch(eq.u.data.operation)
 *         {
 *             ...
 *         }
 *     }
 * };
 *
 * @endcode
 * @ingroup Xen
 ******************************************************************************/
template<typename Ring, typename SRing, typename Req, typename Rsp>
class RingBufferBase : public RingBufferItf
{
public:

	/**
	 * @param[in] domId    frontend domain id
	 * @param[in] ref      ring buffer ref number
	 * @param[in] pageSize ring buffer page size
	 */
	RingBufferBase(int domId, int ref, int pageSize = 4096) :
		mBuffer(domId, ref, PROT_READ | PROT_WRITE)
	{
		BACK_RING_INIT(&mRing, static_cast<SRing*>(mBuffer.get()), pageSize);
	}

protected:

	/**
	 * Processes frontend requests.
	 * This function is called when the request from the frontend is received
	 * and should be implemented in a derived class.
	 * @param req[in] request
	 */
	virtual void processRequest(const Req& req) = 0;

	/**
	 * Sends the response to the frontend
	 * @param rsp[in] response
	 */
	void sendResponse(const Rsp& rsp)
	{
		bool notify = false;

		*RING_GET_RESPONSE(&mRing, mRing.rsp_prod_pvt) = rsp;

		mRing.rsp_prod_pvt++;

		RING_PUSH_RESPONSES_AND_CHECK_NOTIFY(&mRing, notify);

		if (notify)
		{
			mNotifyEventChannelCbk();
		}
	}

private:
	Ring mRing;
	XenGnttabBuffer mBuffer;
	NotifyEventCallback mNotifyEventChannelCbk;

	void setNotifyEventChannelCbk(NotifyEventCallback cbk)
	{
		mNotifyEventChannelCbk = cbk;
	}

	void onRequestReceived()
	{
		int numPendingRequests = 0;

		do {
			Req req;

			auto rc = mRing.req_cons;
			auto rp = mRing.sring->req_prod;

			xen_rmb();

			if (RING_REQUEST_PROD_OVERFLOW(&mRing, rp))
			{
				throw RingBufferException("Ring buffer producer overflow");
			}

			while (rc != rp) {

				if (RING_REQUEST_CONS_OVERFLOW(&mRing, rc))
				{
					throw RingBufferException("Ring buffer consumer overflow");
				}

				req = *RING_GET_REQUEST(&mRing, rc);

				mRing.req_cons = ++rc;

				xen_mb();

				processRequest(req);
			}

			RING_FINAL_CHECK_FOR_REQUESTS(&mRing, numPendingRequests);

		} while (numPendingRequests);
	}
};

}

#endif /* INCLUDE_RINGBUFFERBASE_HPP_ */
